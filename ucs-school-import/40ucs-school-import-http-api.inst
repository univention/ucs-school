#!/bin/bash
# -*- coding: utf-8 -*-
#
# Univention UCS@school import HTTP API
#  join script
#
# Copyright 2017-2018 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

VERSION=2

. /usr/share/univention-join/joinscripthelper.lib
. /usr/share/univention-lib/all.sh
. /usr/share/univention-celery/celery.sh

joinscript_init

eval "$(ucr shell)"

univention-directory-manager settings/extended_options create "$@" --ignore_exists \
	--position "cn=UCSschool,cn=custom attributes,cn=univention,$ldap_base" \
	--set name="ucsschoolImportGroup" \
	--set module=groups/group \
	--set objectClass=ucsschoolImportGroup \
	--set default=0 \
	--set editable=1 \
	--set shortDescription="UCS@school Import Permissions" \
	--set longDescription="Enables the configuration options of this group to control the UCS@school import permissions." \
	--set translationShortDescription='"de_DE" "UCS@school Import-Berechtigungen"' \
	--set translationLongDescription='"de_DE" "Aktiviert die Konfigurationsoptionen dieser Gruppe zur Steuerung der UCS@school-Import-Berechtigungen"' || die

univention-directory-manager settings/extended_attribute create "$@" --ignore_exists \
	--position "cn=UCSschool,cn=custom attributes,cn=univention,$ldap_base" \
	--set name="ucsschoolSchool-ImportSchool" \
	--append module=groups/group \
	--append options="ucsschoolImportGroup" \
	--set tabName="UCS@school" \
	--set tabPosition=1 \
	--set groupName="Import Permissions" \
	--set groupPosition="2" \
	--set translationGroupName='"de_DE" "Import-Berechtigungen"' \
	--set shortDescription="Allowed schools for UCS@school Import" \
	--set longDescription="Users of this group are allowed to do UCS@school user import for the selected schools." \
	--set translationShortDescription='"de_DE" "Erlaubte Schulen für den UCS@school-Import"' \
	--set translationLongDescription='"de_DE" "Benutzer dieser Gruppe dürfen UCS@school-Benutzerimports für die gewählten Schulen ausführen."' \
	--set CLIName="ucsschoolImportSchool" \
	--set objectClass=ucsschoolImportGroup \
	--set ldapMapping=ucsschoolImportSchool \
	--set syntax=ucsschoolSchools \
	--set mayChange=1 \
	--set deleteObjectClass=1 \
	--set multivalue=1 || die

univention-directory-manager settings/extended_attribute create "$@" --ignore_exists \
	--position "cn=UCSschool,cn=custom attributes,cn=univention,$ldap_base" \
	--set name="ucsschoolSchool-ImportRole" \
	--append module=groups/group \
	--append options="ucsschoolImportGroup" \
	--set tabName="UCS@school" \
	--set tabPosition=3 \
	--set groupName="Import Permissions" \
	--set groupPosition="2" \
	--set translationGroupName='"de_DE" "Import-Berechtigungen"' \
	--set shortDescription="Allowed roles for UCS@school Import" \
	--set longDescription="Users of this group are allowed to do UCS@school user import for the selected user roles." \
	--set translationShortDescription='"de_DE" "Erlaubte Benutzerrollen für den UCS@school-Import"' \
	--set translationLongDescription='"de_DE" "Benutzer dieser Gruppe dürfen UCS@school-Benutzerimports für die gewählten Benutzerrollen ausführen."' \
	--set CLIName="ucsschoolImportRole" \
	--set objectClass=ucsschoolImportGroup \
	--set ldapMapping=ucsschoolImportRole \
	--set syntax=ucsschoolTypes \
	--set mayChange=1 \
	--set deleteObjectClass=1 \
	--set multivalue=1 || die

CONF_DIR="/etc/ucsschool-import"

DJANGO_SECRET_FILE="$CONF_DIR/django_key.secret"
RABBITMQ_SECRET_FILE="$CONF_DIR/rabbitmq.secret"
POSTGRES_SECRET_FILE="$CONF_DIR/postgres.secret"

RABBITMQ_USER="importhttpapi"
RABBITMQ_VHOST="importhttpapi"
POSTGRES_USER="importhttpapi"
POSTGRES_DB="importhttpapi"

ADMINISTRATOR_UID="$(custom_username "Administrator")"

write_secret () {
	local filename="$1" secret="${2:-}"
	mkdir -p "$(dirname $filename)"
	touch "$filename"
	chmod 0600 "$filename"
	chown uas-import:uas-import "$filename"
	if [ -n "$secret" ];
	then
	    echo "$secret" >"$filename"
	else
        echo "ERROR: refusing to write empty string to $filename"
        return 1
    fi
}

ucr commit /etc/ucsschool-import/ldap.secret

if [ -e "$DJANGO_SECRET_FILE" ];
then
    echo "Using exiting secret for HTTP API service."
else
    echo "Creating secret for HTTP API service."
    DJANGO_SECRET_PW="$(makepasswd --chars=50)"
    write_secret "$DJANGO_SECRET_FILE" "$DJANGO_SECRET_PW" || die
fi

if [ -e "$RABBITMQ_SECRET_FILE" ];
then
    echo "Using exiting password for RabbitMQ."
    RABBITMQ_PW="$(cat "$RABBITMQ_SECRET_FILE" | cut -d : -f 2)"
else
    echo "Creating new password for RabbitMQ."
    RABBITMQ_PW="$(makepasswd --chars=50)"
    write_secret "$RABBITMQ_SECRET_FILE" "$RABBITMQ_USER:$RABBITMQ_PW" || die
fi

if rabbitmqctl list_users | grep -q "$RABBITMQ_USER";
then
    echo "Using exiting RabbitMQ user and vhost."
else
    echo "Creating new RabbitMQ user and vhost."
    rabbitmq_add_vhost "$RABBITMQ_USER" "$RABBITMQ_PW" "$RABBITMQ_VHOST" || die
fi

if [ -e "$POSTGRES_SECRET_FILE" ];
then
    echo "Using exiting password for PostgreSQL."
    POSTGRES_PW="$(cat "$POSTGRES_SECRET_FILE")"
else
    echo "Creating new password for PostgreSQL."
    POSTGRES_PW="$(makepasswd --chars=50)"
    write_secret "$POSTGRES_SECRET_FILE" "$POSTGRES_PW" || die
fi

if echo "\du $POSTGRES_USER" | su - postgres -c psql | grep -q "$POSTGRES_USER";
then
    echo "Setting password on exiting PostgreSQL user."
else
    echo "Creating new PostgreSQL user."
    su - postgres -c "echo \"CREATE ROLE $POSTGRES_USER WITH LOGIN;\" | psql" || die
fi
su - postgres -c "echo \"ALTER ROLE $POSTGRES_USER WITH ENCRYPTED PASSWORD '$POSTGRES_PW';\" | psql" || die

if echo '\list' | su - postgres -c psql | grep -q "$POSTGRES_DB";
then
    echo "Using exiting PostgreSQL database."
else
    echo "Creating new PostgreSQL database."
    su - postgres -c "createdb -E UTF8 -O $POSTGRES_USER -T template0 $POSTGRES_DB" || die
fi

python /usr/share/pyshared/ucsschool/http_api/manage.py check --no-color --deploy || die
echo "Collecting static files..."
python /usr/share/pyshared/ucsschool/http_api/manage.py collectstatic --no-color --noinput --link || die
echo "Migrating DB schema..."
python /usr/share/pyshared/ucsschool/http_api/manage.py migrate --no-color --noinput || die
if python /usr/share/pyshared/ucsschool/http_api/manage.py shell --no-color --plain -c  "import sys; from django.contrib.auth.models import User; sys.exit(int(not User.objects.filter(username=\"$ADMINISTRATOR_UID\", is_superuser=True).exists()))";
then
    printf "\nSuper user exists.\n"
else
    printf "\nCreating super user...\n"
    python /usr/share/pyshared/ucsschool/http_api/manage.py createsuperuser --username "$ADMINISTRATOR_UID" --email "root@$hostname.$domainname" --no-color --noinput
fi
echo "Seeding DB with School entries..."
python /usr/share/pyshared/ucsschool/http_api/manage.py shell --no-color --plain -c 'from ucsschool.http_api.import_api.models import School; School.update_from_ldap()'

a2enmod proxy_http
a2ensite ucs-school-import-http-api.conf

echo "Enabling and starting services..."
systemctl daemon-reload
for SERVICE in  rabbitmq-server celery-worker-ucsschool-import postgresql ucs-school-import-http-api apache2;
do
    deb-systemd-invoke enable "$SERVICE.service"
    deb-systemd-invoke start "$SERVICE.service"
done

univention-directory-manager policies/umc create "$@" --ignore_exists \
	--position "cn=UMC,cn=policies,$ldap_base" \
	--set name="schoolimport-all" \
	--append allow="cn=schoolimport-all,cn=operations,cn=UMC,cn=univention,$ldap_base" || die

pkill -f univention-cli-server  # make sure the extended attributes are initialized
python -c 'from ucsschool.lib.models import School; import univention.admin.uldap; lo, po = univention.admin.uldap.getMachineConnection(); print "%s\x00" % "\x00".join(school.name for school in School.get_all(lo, "", respect_local_oulist=False))' | while read -d $'\0' school; do
	district=''
	if is_ucr_true "ucsschool/ldap/district/enable" ; then
		district=",ou=${school:0:2}"
	fi
	univention-directory-manager groups/group create "$@" --ignore_exists \
		--position "cn=groups,ou=$school${district},$ldap_base" \
		--set name="$school-import-all" \
		--set description="Default group for UCS@school user imports" \
		--policy-reference "cn=schoolimport-all,cn=UMC,cn=policies,$ldap_base" || die

	univention-directory-manager groups/group modify "$@" \
		--dn "cn=$school-import-all,cn=groups,ou=$school${district},$ldap_base" \
		--append-option "ucsschoolImportGroup" \
		--set ucsschoolImportSchool="$school" \
		--append ucsschoolImportRole=student \
		--append ucsschoolImportRole=staff \
		--append ucsschoolImportRole=teacher_and_staff \
		--append ucsschoolImportRole=teacher || die
done

joinscript_save_current_version

exit 0
